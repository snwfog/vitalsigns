<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							firstView="application.view.LoginView"
							applicationComplete="VitalSigns_applicationCompleteHandler(event)"
							gestureSwipe="swipeHandler(event)">
	
	<fx:Style source="Styling.css"/>
	<fx:Script>
		<![CDATA[
			import application.component.AlertWindow;
			import application.controller.messaging.NotificationController;
			import application.factory.FactoryGenerator;
			import application.factory.IPlatformFactory;
			
			import domain.user.User;
			
			import flash.ui.Keyboard;
			import flash.utils.Timer;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.events.FlexEvent;
			import mx.utils.object_proxy;
			
			import org.flexunit.internals.namespaces.classInternal;
			
			import spark.transitions.SlideViewTransition;
			import spark.transitions.ViewTransitionDirection;
			
			public static const iImageWidth:int = 100;
			public static const iMaxColumns:int = 6;
			
			public static const iPasswordLength:int = 2;
			
			public static const timeOutTime:uint = 5000;
			private var timeOutCounter:uint;
			
			private var isTimeOut:Boolean = false;
			
			public static const endPoint:String = "http://soen490.dyndns.info:9000/cis-ws/vitalSignReg?wsdl";
			
			private static var portraitMode:Boolean = false;
			private static var listeners:ArrayCollection = new ArrayCollection();
			private static var swipeListeners:ArrayCollection = new ArrayCollection();
			private static var sliderActive:Boolean = false;
			
			private static var thisObj:VitalSigns;
			
			private static var _currentUser:User = null;
			
			// scaling factors
			private const targetWidth:Number = 480;
			private const targetHeight:Number = 800;
			public static var widthScale:Number = 1;
			public static var heightScale:Number = 1;
			
			public static var PlatformFactory:IPlatformFactory = FactoryGenerator.getFactory();
			
			
			protected function VitalSigns_applicationCompleteHandler(event:FlexEvent):void
			{
				thisObj = this; // reference to the instance of VitalSigns in a static context
				
				stage.align = StageAlign.TOP_LEFT;
				this.stage.addEventListener( StageOrientationEvent.ORIENTATION_CHANGE,onOrientationChange );
				
				portraitMode = stage.width < stage.height;
				
				// scale ratios
				widthScale = stage.fullScreenWidth / targetWidth;
				heightScale = stage.fullScreenHeight / targetHeight;
				
				stage.addEventListener(Event.DEACTIVATE, onAppFocusLost);
				stage.addEventListener(Event.ACTIVATE, onAppFocus);
				
			}
			
			//The following kills the application if it loses focus, forcing the user to re-enter credentials
			//before having access to sensitive information.
			private function onAppFocusLost( event:Event ):void
			{	
				isTimeOut = true;
				timeOutCounter = setTimeout(timeOutExit, timeOutTime);
			}
			
			private function onAppFocus( event:Event ):void
			{
				isTimeOut = false;			
				clearTimeout(timeOutCounter);
			}
			
			private function timeOutExit():void{
				if(isTimeOut)
					NativeApplication.nativeApplication.exit();
			}
			//--------------------------------------------------------
			
			private function onOrientationChange( soe:StageOrientationEvent ):void
			{
				
				var x:int = this.stage.stageWidth;
				var y:int = this.stage.stageHeight;
				
				switch ( soe.afterOrientation )
				{
					case StageOrientation.ROTATED_LEFT:
					case StageOrientation.ROTATED_RIGHT:
						portraitMode = false;
						break;
					
					case StageOrientation.DEFAULT:
					case StageOrientation.UPSIDE_DOWN:
						portraitMode = true;
						break;
					
					default:
						break;
				}
				
				for( var i:int = 0; i < listeners.length; i++ ){
					var listener:Object = listeners.getItemAt( i );
					doCallback( listener.theFunction, listener.addParameters, x, y );
				}
			}
			
			public static function exitApplication():void{
				NotificationController.cancelNotifications();
				NativeApplication.nativeApplication.exit();
			}
			
			/**
			 * Registers a function to listen to the orientation change. Calls the function for the initial positioning.
			 */ 
			public static function registerOrientationChangeListener( callback:Function, sendDimensions:Boolean = true ):void{
				listeners.addItem( { theFunction: callback, addParameters: sendDimensions } );
				
				doCallback( callback, sendDimensions, thisObj.stage.stageWidth, thisObj.stage.stageHeight );
			}
			
			private static function doCallback( callback:Function, sendDimensions:Boolean, width:int, height:int ):void{
				if( sendDimensions )
					callback( width, height );
				else
					callback();
			}
			
			public static function removeOrientationChangeListener( callback:Function ):void{
				for( var i:int = 0; i < listeners.length; i++ ){
					if( listeners.getItemAt( i ).theFunction === callback ){
						listeners.removeItemAt( i );
						return;
					}
				}
			}
			
			public static function showMessage( message:String, type:String = "Warning" ):void{
				var alertWindow:AlertWindow = new AlertWindow();
				alertWindow.type = type;
				alertWindow.message = message;
				alertWindow.open( thisObj, true );
			}
			
			public static function showErrorMessage( message:String = "" ):void{
				showMessage( message + ( message.length > 0 ? ". " : "" ) + "Could not establish a connection with the network. Please try again when connection is re-established.", "Error" );
			}
			
			public static function get isPortraitMode():Boolean{
				return portraitMode;
			}
			
			/**
			 * Provides a way to push the specified view onto the stack and remove all the current orientation-change listeners
			 */ 
			public static function doViewPush( viewClass:Class, data:Object = null ):void{
				//Optimized, the following is more efficient than listeners.removeAll()
				listeners.source = [];
				swipeListeners.source = [];
				thisObj.navigator.pushView( viewClass, data );
			}
			
			/**
			 * Getter/Setter of the User object, visible to the entire application
			 */
			
			public static function set currentUser( value:User ):void{
				_currentUser = value;
			}
			
			public static function get currentUser():User{
				return _currentUser;
			}
			
			/*public static function get notificationManager():NotificationManager{
				return null;
				//return _notificationManager;
			}*/
			
			/**
			 * Registers a function to listen to swipes
			 */
			private function swipeHandler(event:TransformGestureEvent):void {
				var slide:SlideViewTransition = new SlideViewTransition();
				var direction:String = null;
				//Right
				if (event.offsetX == 1) {
					slide.direction = ViewTransitionDirection.RIGHT;
					slide.duration = 500;
					direction = "RIGHT";
				}
				//Left
				else if (event.offsetX == -1) {
					slide.direction = ViewTransitionDirection.LEFT;
					slide.duration = 500;
					direction = "LEFT";
				}
				//DOWN
				else if (event.offsetY == 1) {
					slide.direction = ViewTransitionDirection.DOWN;
					slide.duration = 500;
					direction = "DOWN";
				}
				//UP
				else if (event.offsetY == -1) {
					slide.direction = ViewTransitionDirection.UP;
					slide.duration = 500;
					direction = "UP"
				}
				
				for( var i:int = 0; i < swipeListeners.length; i++ ){
					var swipeListener:Object = swipeListeners.getItemAt( i );
					doSwipeCallback( swipeListener.theFunction, direction, slide);
				}
			}
			
			public static function registerSwipeListener(callback:Function):void{
				swipeListeners.addItem( { theFunction: callback } );
					callback();
			}
			
			public static function removeSwipeListener():void{
				//Remove all, since there is only one at any given time.
				//The following is more efficient than swipeListeners.removeAll();
				swipeListeners.source = [];
			}
			
			public static function doSwipeCallback(callback:Function, direction:String, slide:SlideViewTransition):void{
				if(direction == null)
					callback();
				else
					callback(slide, direction);							
			}
			
			
			// this is not an application level function. It should not belong here.
			public static function get isSliderActive():Boolean{
				return sliderActive;
			}
			
			public static function set isSliderActive(value:Boolean):void{
				sliderActive = value;
			}
			
				
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:ViewNavigatorApplication>
