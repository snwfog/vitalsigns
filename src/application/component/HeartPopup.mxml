<?xml version="1.0" encoding="utf-8"?>
<s:SkinnablePopUpContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark"
						   skinClass="application.skins.KeyPadPopupSkin" 
						   xmlns:mx="library://ns.adobe.com/flex/mx"
						   add="customKeypad_addHandler(event)"
						   xmlns:components="application.component.*"
						   width="450" height="600">
	<fx:Metadata>
		[Event(name="returnKey", type="KeypadReturnEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import application.component.AlertWindow;
			import application.component.PopupList;
			import application.controller.DataConfirmationController;
			import application.controller.DataEntryController;
			import application.events.KeypadReturnEvent;
			
			import model.Data;
			import model.DataTypeEnum;
			
			import mx.collections.ArrayCollection;
			import mx.core.INavigatorContent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			import spark.events.PopUpEvent;
			
			private var heartSites:ArrayCollection = Data.getInstance().heartSite;
			[Bindable]public var selectedHeartSite:String = heartSites.getItemAt(0) as String;
			public var currentPopUp:Object = new Object();
			
			[Bindable]
			private var dp : Array = new Array ("7","8","9","4","5","6","1","2","3","/","0",".");
			
			[Bindable]public var currentVitalSign : String;
			[Bindable]public var allowInput : String;
			[Bindable]public var rangeUpperLimit : String;
			[Bindable]public var rangeLowerLimit : String;
			[Bindable]public var rangeDisplay : String;
			public var maxLength : int;
			
			private var currentPopup:SkinnablePopUpContainer = null;
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				if (textInput.text == null)
				{
					if ((event.target.content != ".") && (event.target.content != "/"))
						textInput.text = event.target.content;
					
				}
				else if (textInput.text.length != maxLength)
				{
					if ((event.target.content != ".") && (event.target.content != "/"))
						textInput.text = textInput.text + event.target.content;
					else if ((event.target.content == allowInput) && (textInput.text.indexOf(allowInput, 0) == -1))
						textInput.text = textInput.text + event.target.content;
				}
			}
			
			protected function btnDelete_clickHandler(event:MouseEvent):void
			{
				if(textInput.text!=null)
					textInput.text = textInput.text.substring(0,textInput.text.length-1);
			}
			
			protected function btnEnter_clickHandler(event:MouseEvent):void
			{
				
				if(DataConfirmationController.PulseRate=="Regular"||DataConfirmationController.PulseRate=="Irregular")
				{
					var errorMsg:String;
					
					if (currentVitalSign != DataTypeEnum.BLOODPRESSURE)
					{
						errorMsg = Data.getRangeError(currentVitalSign, textInput.text, 
							Number(rangeLowerLimit), Number(rangeUpperLimit));
					}
					else
					{
						var pattern:RegExp = /^\d+\/\d+$/;
						if (textInput.text.search(pattern) < 0)
						{
							errorMsg = "Invalid Blood pressure value. Blood pressure should be of the format " +
								"Systolic BP/Diastolic BP";
						}
						else {
							errorMsg = Data.getRangeError(currentVitalSign, textInput.text, Number(0), Number(300));
						}
					}
					
					if (errorMsg != "")
					{
						var rangeAlert : AlertWindow = new AlertWindow();
						rangeAlert.errorMsg = errorMsg;
						currentPopup = rangeAlert;
						
						rangeAlert.open(this, true);
						rangeAlert.availWidth = this.width;
						rangeAlert.availHeight = this.height;
						rangeAlert.move( this.x, this.y);
						
						rangeAlert.addEventListener(Event.CLOSE, onRangeAlertClose);
					}
					else
					{
						var returnValue : KeypadReturnEvent = new KeypadReturnEvent("returnKey");
						var testInputFormatting : String = "";
						
						testInputFormatting = textInput.text;
						
						if (testInputFormatting.indexOf(".") == testInputFormatting.length - 1){
							//if return value ends with a "." then remove it
							testInputFormatting = testInputFormatting.substr(0, testInputFormatting.length - 1)
						}
						else if (testInputFormatting.indexOf(".") == 0){
							//if return value starts with a "." add a 0 infront
							testInputFormatting = "0" || testInputFormatting;
						}
						
						returnValue.totalvalue = testInputFormatting;
						textInput.text = "";
						
						dispatchEvent(returnValue);
						removeListener();		
						this.close(false);
					}
				}else{
				
					var popUpP:PulsePopup = new PulsePopup;
					popUpP.availWidth = stage.width * 0.8;
					popUpP.availHeight = stage.height * 0.8;
					popUpP.open(this, true);
				}
			}
			
			protected function onRangeAlertClose(event:Event):void
			{
				textInput.text = "";
				currentPopup = null;
			}
			
			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				removeListener();
				this.close(false);
			}
			
			protected function btnClear_clickHandler(event:MouseEvent):void
			{
				DataEntryController.setHeartRateSite(null);
				DataEntryController.setHeartRateValue(null);
				DataEntryController.setPulseRate(null);
				DataConfirmationController.setHeartRateSite("No value entered");
				DataConfirmationController.setHeartRateValue("No value entered");
				DataConfirmationController.setPulseRate("No value entered");
				DataEntryController.clearControl();
				removeListener();
				this.close(false);
			}
			
			protected function customKeypad_addHandler(event:FlexEvent):void
			{
				relocate( parentApplication.stage.width, parentApplication.stage.height );
				VitalSigns.registerOrientationChangeListener( relocate );
				this.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				if (currentVitalSign == DataTypeEnum.BLOODPRESSURE)
				{
					rangeDisplay = "Enter values between " + rangeLowerLimit + "-" +  rangeUpperLimit
						+ "/" + rangeLowerLimit + "-" +  rangeUpperLimit;
				}
				else
				{
					rangeDisplay = "Enter value between " + rangeLowerLimit + " and " +  rangeUpperLimit;
				}
				this.setFocus();
			}
			
			public function relocate( x:int, y:int ):void
			{
				this.move( ( x - this.width ) / 2, ( y - this.height ) / 2 );
				if (currentPopup)
					currentPopup.move( ( x - currentPopup.width ) / 2, ( y - currentPopup.height ) / 2 );
			}
			
			protected function removeListener():void
			{
				VitalSigns.removeOrientationChangeListener( relocate );
			}
			
			protected function onKeyDown(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.BACK)
				{	
					event.preventDefault();
					if (currentPopup && currentPopup.isOpen)
						currentPopup.close();
					else
						close();				
				}
			}
			
			protected function heartDdlUnit_clickHandler(event:MouseEvent):void
			{
				if (event != null)
					event.preventDefault();
				
				var popUp:PopupList = new PopupList();
				popUp.dataProvider = heartSites;
				popUp.addEventListener(PopUpEvent.CLOSE,onHeartPopUpClose);
				popUp.open(this,true);
				currentPopUp = popUp;
				var dropDown:DropDownEntry = event.currentTarget as DropDownEntry;
				dropDown.selected = true;
			}		
			
			protected function onHeartPopUpClose(event:PopUpEvent):void
			{
				if(event.commit)
				{
					selectedHeartSite = heartSites.getItemAt(event.data) as String;
					DataConfirmationController.setHeartRateSite(selectedHeartSite);
					DataEntryController.setHeartRateSite(selectedHeartSite);
				}
				currentPopUp = null;
			}
			
			protected function pulseRate_changeHandler(event:IndexChangeEvent):void
			{
				if(event.newIndex!=-1)
				{
					if (pulseRate.dataProvider.getItemAt(pulseRate.selectedIndex) == "Regular")
					{
						//for regular
						DataConfirmationController.setPulseRate("Regular");
						DataEntryController.setPulseRate("Regular");
					}
					else
					{ 
						//for irregular
						DataConfirmationController.setPulseRate("Irregular");
						DataEntryController.setPulseRate("Irregular");
					}
				}else{
					DataConfirmationController.setPulseRate("No value entered");
					DataEntryController.setPulseRate("No value entered");
				}
			}
			
			protected function textInput_softKeyboardActivatingHandler(event:SoftKeyboardEvent):void
			{
				// TODO Auto-generated method stub
				event.preventDefault();
			}
			
		]]>
	</fx:Script>
	<!-- Also uses the MyPopupSkin.mxml class -->
	<s:VGroup paddingTop="5" paddingBottom="5" paddingLeft="8" paddingRight="8" horizontalAlign="center" height="100%" width="100%">
		<s:Label text="Heart Rate Site:" fontSize="20" fontWeight="bold"/>
		<components:DropDownEntry id="heartDdlUnit" click="heartDdlUnit_clickHandler(event)" 
								  value="{selectedHeartSite}" />
		<s:Label text="Pulse Rate:" fontSize="20" fontWeight="bold"/>
		<s:ButtonBar id="pulseRate" width="100%" height="50" color="#FFFFFF" fontSize="20" chromeColor="#A71D1B"
						 fontStyle="normal" fontWeight="bold" requireSelection="false"
						 textAlign="center" change="pulseRate_changeHandler(event)">
				<s:ArrayCollection>
					<fx:String>Regular</fx:String>
					<fx:String>Irregular</fx:String>
				</s:ArrayCollection> 
		</s:ButtonBar>
		<s:Label text="{currentVitalSign} Value:" fontSize="20" fontWeight="bold"/>
		<s:TextInput prompt="No Value Entered" id="textInput" editable="false" width="100%" softKeyboardActivating="textInput_softKeyboardActivatingHandler(event)" textAlign="center" needsSoftKeyboard="false" />
		<s:Label width="100%" textAlign="center" text="{rangeDisplay}"  fontSize="16"/>
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="25%" height="100%">
				<s:Button label="Clear" fontSize="12" width="80" height="65" click="btnClear_clickHandler(event)"/>
				<s:Spacer height="100%"/>
				<s:Button label="Cancel" fontSize="12" width="80" height="65" click="btnClose_clickHandler(event)"/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%" paddingLeft="15">
				<mx:Tile width="100%" height="100%" direction="horizontal">
					<mx:Repeater dataProvider="{dp}" id="rep" width="100%" height="100%">
						<s:Button width="65" height="65" label="{rep.currentItem}" click="button1_clickHandler(event)"/>
					</mx:Repeater>
				</mx:Tile>
			</s:VGroup>
			<s:VGroup width="25%" height="100%" >
				<s:Button label="Del" fontSize="12" width="65" height="65" click="btnDelete_clickHandler(event)"/>
				<s:Spacer height="100%"/>
				<s:Button label="Enter" fontSize="12" width="65" height="65" click="btnEnter_clickHandler(event)"/>
			</s:VGroup>
		</s:HGroup>
		
	</s:VGroup>  
</s:SkinnablePopUpContainer>
